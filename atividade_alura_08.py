# -*- coding: utf-8 -*-
"""Lucas_D_Atividade_Alura_08

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12fRJLISHw9PnXxhtfYmRbQJvCZAGkuu_
"""

{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Vf9oP6qmn6Li"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1Crie uma pasta chamada oo em sua workspace e crie um arquivo chamado teste_conta.py"
      ],
      "metadata": {
        "id": "cWAEuCYio_9m"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "os.makedirs('oo', exist_ok=True)\n",
        "\n",
        "file_path = 'oo/teste_conta.py'\n",
        "\n",
        "conteudo = \"\"\"\n",
        "class Conta:\n",
        "    def __init__(self, titular, saldo=0):\n",
        "        self.titular = titular\n",
        "        self.saldo = saldo\n",
        "\n",
        "    def depositar(self, valor):\n",
        "        self.saldo += valor\n",
        "\n",
        "    def sacar(self, valor):\n",
        "        if valor <= self.saldo:\n",
        "            self.saldo -= valor\n",
        "            return True\n",
        "        return False\n",
        "\n",
        "    def consultar_saldo(self):\n",
        "        return self.saldo\n",
        "\"\"\"\n",
        "\n",
        "with open(file_path, 'w') as f:\n",
        "    f.write(conteudo)\n",
        "\n",
        "print(f\"Arquivo criado em: {file_path}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-_GnIxZPpCx7",
        "outputId": "d17dc8d7-fd34-4df3-bd71-4cfa26b63b38"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Arquivo criado em: oo/teste_conta.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.Crie a função chamada cria_conta(), que recebe como argumento numero, titular, saldo e limite"
      ],
      "metadata": {
        "id": "LrlD8lETqTc-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def cria_conta(numero, titular, saldo, limite):\n",
        "    conta = {\n",
        "        'numero': numero,\n",
        "        'titular': titular,\n",
        "        'saldo': saldo,\n",
        "        'limite': limite\n",
        "    }\n",
        "    return conta\n"
      ],
      "metadata": {
        "id": "sF3LIYB9qXY1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "3.Dentro de cria_conta(), crie uma variável do tipo dicionário chamada conta com as chaves recebendo os valores dos parâmetros (numero, titular, saldo e limite), e ao final, retorne a conta"
      ],
      "metadata": {
        "id": "h14qtI-HrzB4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def cria_conta(numero, titular, saldo, limite):\n",
        "    conta = {\"numero\": numero, \"titular\": titular, \"saldo\": saldo, \"limite\": limite}\n",
        "    return conta\n"
      ],
      "metadata": {
        "id": "XcpLNDr_r58v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "4.Crie uma função chamada deposita() no mesmo arquivo teste_conta.py que recebe como argumento uma conta e um valor. Dentro da função, adicione o valor ao saldo da conta"
      ],
      "metadata": {
        "id": "tU2HSMhisN6-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def cria_conta(numero, titular, saldo, limite):\n",
        "    conta = {\"numero\": numero, \"titular\": titular, \"saldo\": saldo, \"limite\": limite}\n",
        "    return conta\n",
        "\n",
        "def deposita(conta, valor):\n",
        "    conta['saldo'] += valor\n"
      ],
      "metadata": {
        "id": "XN0_hs-8sPfu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "5.Crie outra função chamada saca() que recebe como argumento uma conta e um valor. Dentro da função, subtraia o valor do saldo da conta"
      ],
      "metadata": {
        "id": "m5tUTpe6sgjN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def cria_conta(numero, titular, saldo, limite):\n",
        "    conta = {\"numero\": numero, \"titular\": titular, \"saldo\": saldo, \"limite\": limite}\n",
        "    return conta\n",
        "\n",
        "def deposita(conta, valor):\n",
        "    conta['saldo'] += valor\n",
        "\n",
        "def saca(conta, valor):\n",
        "    conta['saldo'] -= valor\n"
      ],
      "metadata": {
        "id": "VjGiNhVvsiFo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "6.E por fim, crie uma função chamada extrato(), que recebe como argumento uma conta e imprime o numero e o saldo"
      ],
      "metadata": {
        "id": "MucN-hF2s28O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def cria_conta(numero, titular, saldo, limite):\n",
        "    conta = {\"numero\": numero, \"titular\": titular, \"saldo\": saldo, \"limite\": limite}\n",
        "    return conta\n",
        "\n",
        "def deposita(conta, valor):\n",
        "    conta['saldo'] += valor\n",
        "\n",
        "def saca(conta, valor):\n",
        "    conta['saldo'] -= valor\n",
        "\n",
        "def extrato(conta):\n",
        "    print(\"numero: {} \\nsaldo: {}\".format(conta['numero'], conta['saldo']))\n"
      ],
      "metadata": {
        "id": "L9sGsHEGs4un"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "7.Navegue até a pasta oo , digite os comandos no arquivo teste_conta.py e teste as funcionalidades"
      ],
      "metadata": {
        "id": "xCZhRhyItCh3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import sys\n",
        "\n",
        "os.makedirs('oo', exist_ok=True)\n",
        "\n",
        "codigo = \"\"\"\n",
        "def cria_conta(numero, titular, saldo, limite):\n",
        "    conta = {\"numero\": numero, \"titular\": titular, \"saldo\": saldo, \"limite\": limite}\n",
        "    return conta\n",
        "\n",
        "def deposita(conta, valor):\n",
        "    conta['saldo'] += valor\n",
        "\n",
        "def saca(conta, valor):\n",
        "    conta['saldo'] -= valor\n",
        "\n",
        "def extrato(conta):\n",
        "    print(\"numero: {} \\\\nsaldo: {}\".format(conta['numero'], conta['saldo']))\n",
        "\"\"\"\n",
        "\n",
        "with open('oo/teste_conta.py', 'w') as f:\n",
        "    f.write(codigo)\n",
        "\n",
        "sys.path.append('./oo')\n",
        "\n",
        "import teste_conta\n",
        "\n",
        "conta = teste_conta.cria_conta('123-7', 'João', 500.0, 1000.0)\n",
        "teste_conta.deposita(conta, 50.0)\n",
        "teste_conta.extrato(conta)\n",
        "\n",
        "teste_conta.saca(conta, 20.0)\n",
        "teste_conta.extrato(conta)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5yU2Wuqaty2h",
        "outputId": "e4fe3ac4-e842-47e9-ef20-ec14833ac0ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "numero: 123-7 \n",
            "saldo: 550.0\n",
            "numero: 123-7 \n",
            "saldo: 530.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "8.(Opcional) Acrescente uma documentação para o seu módulo teste_conta.py e utilize a função help() para testá-la."
      ],
      "metadata": {
        "id": "5aFvzwnquiD6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import sys\n",
        "\n",
        "os.makedirs('oo', exist_ok=True)\n",
        "\n",
        "codigo = '''\n",
        "\"\"\"\n",
        "Módulo teste_conta.py\n",
        "\n",
        "Este módulo contém funções para criar e manipular contas bancárias simples,\n",
        "incluindo criação, depósito, saque e exibição de extrato.\n",
        "\"\"\"\n",
        "\n",
        "def cria_conta(numero, titular, saldo, limite):\n",
        "    \"\"\"\n",
        "    Cria uma conta bancária.\n",
        "\n",
        "    Args:\n",
        "        numero (str): Número da conta.\n",
        "        titular (str): Nome do titular da conta.\n",
        "        saldo (float): Saldo inicial da conta.\n",
        "        limite (float): Limite da conta.\n",
        "\n",
        "    Returns:\n",
        "        dict: Dicionário representando a conta.\n",
        "    \"\"\"\n",
        "    conta = {\"numero\": numero, \"titular\": titular, \"saldo\": saldo, \"limite\": limite}\n",
        "    return conta\n",
        "\n",
        "def deposita(conta, valor):\n",
        "    \"\"\"\n",
        "    Deposita um valor na conta.\n",
        "\n",
        "    Args:\n",
        "        conta (dict): Conta onde o depósito será realizado.\n",
        "        valor (float): Valor a ser depositado.\n",
        "    \"\"\"\n",
        "    conta['saldo'] += valor\n",
        "\n",
        "def saca(conta, valor):\n",
        "    \"\"\"\n",
        "    Realiza um saque na conta.\n",
        "\n",
        "    Args:\n",
        "        conta (dict): Conta onde o saque será realizado.\n",
        "        valor (float): Valor a ser sacado.\n",
        "    \"\"\"\n",
        "    conta['saldo'] -= valor\n",
        "\n",
        "def extrato(conta):\n",
        "    \"\"\"\n",
        "    Imprime o número e saldo da conta.\n",
        "\n",
        "    Args:\n",
        "        conta (dict): Conta a ser exibida.\n",
        "    \"\"\"\n",
        "    print(\"numero: {} \\\\nsaldo: {}\".format(conta['numero'], conta['saldo']))\n",
        "'''\n",
        "\n",
        "with open('oo/teste_conta.py', 'w') as f:\n",
        "    f.write(codigo)\n",
        "\n",
        "sys.path.append('./oo')\n",
        "\n",
        "import teste_conta\n",
        "\n",
        "help(teste_conta)\n",
        "help(teste_conta.cria_conta)\n",
        "help(teste_conta.deposita)\n",
        "help(teste_conta.saca)\n",
        "help(teste_conta.extrato)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aSTcbfCLumBJ",
        "outputId": "04ca7e57-842d-4b31-9d39-5e81a04b5ca4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Help on module teste_conta:\n",
            "\n",
            "NAME\n",
            "    teste_conta\n",
            "\n",
            "FUNCTIONS\n",
            "    cria_conta(numero, titular, saldo, limite)\n",
            "    \n",
            "    deposita(conta, valor)\n",
            "    \n",
            "    extrato(conta)\n",
            "    \n",
            "    saca(conta, valor)\n",
            "\n",
            "FILE\n",
            "    /content/oo/teste_conta.py\n",
            "\n",
            "\n",
            "Help on function cria_conta in module teste_conta:\n",
            "\n",
            "cria_conta(numero, titular, saldo, limite)\n",
            "\n",
            "Help on function deposita in module teste_conta:\n",
            "\n",
            "deposita(conta, valor)\n",
            "\n",
            "Help on function saca in module teste_conta:\n",
            "\n",
            "saca(conta, valor)\n",
            "\n",
            "Help on function extrato in module teste_conta:\n",
            "\n",
            "extrato(conta)\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.Crie um arquivo chamado conta.py na pasta oo criada no exercício anterior."
      ],
      "metadata": {
        "id": "IbSTSwu-vZdT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import sys\n",
        "\n",
        "os.makedirs('oo', exist_ok=True)\n",
        "\n",
        "codigo_conta = '''\n",
        "class Conta:\n",
        "\n",
        "    def __init__(self, numero, titular, saldo, limite):\n",
        "        self.numero = numero\n",
        "        self.titular = titular\n",
        "        self.saldo = saldo\n",
        "        self.limite = limite\n",
        "\n",
        "    def deposita(self, valor):\n",
        "        self.saldo += valor\n",
        "\n",
        "    def saca(self, valor):\n",
        "        if self.saldo < valor:\n",
        "            return False\n",
        "        else:\n",
        "            self.saldo -= valor\n",
        "            return True\n",
        "\n",
        "    def extrato(self):\n",
        "        print(\"numero: {} \\\\nsaldo: {}\".format(self.numero, self.saldo))\n",
        "\n",
        "    def transfere_para(self, destino, valor):\n",
        "        retirou = self.saca(valor)\n",
        "        if retirou == False:\n",
        "            return False\n",
        "        else:\n",
        "            destino.deposita(valor)\n",
        "            return True\n",
        "'''\n",
        "\n",
        "with open('oo/conta.py', 'w') as f:\n",
        "    f.write(codigo_conta)\n",
        "\n",
        "codigo_teste = '''\n",
        "from conta import Conta\n",
        "\n",
        "conta1 = Conta('123-4', 'João', 120.0, 1000.0)\n",
        "conta2 = Conta('567-8', 'Maria', 200.0, 1000.0)\n",
        "\n",
        "conta1.deposita(50.0)\n",
        "conta1.extrato()\n",
        "\n",
        "conta1.saca(20.0)\n",
        "conta1.extrato()\n",
        "\n",
        "sucesso = conta1.transfere_para(conta2, 100.0)\n",
        "print(\"Transferência realizada?\", sucesso)\n",
        "\n",
        "conta1.extrato()\n",
        "conta2.extrato()\n",
        "'''\n",
        "\n",
        "with open('oo/conta_teste.py', 'w') as f:\n",
        "    f.write(codigo_teste)\n",
        "\n",
        "sys.path.append('./oo')\n",
        "\n",
        "get_ipython().system('python3 oo/conta_teste.py')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8GiAbhONvk3z",
        "outputId": "82d2ca74-a445-4174-eee7-0ea4eee7fa3f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "numero: 123-4 \n",
            "saldo: 170.0\n",
            "numero: 123-4 \n",
            "saldo: 150.0\n",
            "Transferência realizada? True\n",
            "numero: 123-4 \n",
            "saldo: 50.0\n",
            "numero: 567-8 \n",
            "saldo: 300.0\n"
          ]
        }
      ]
    }
  ]
}
