# -*- coding: utf-8 -*-
"""Atividade_Alura_13

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12fRJLISHw9PnXxhtfYmRbQJvCZAGkuu_
"""

class SaldoInsuficienteError(RuntimeError):
    pass


# Classe base Conta
class Conta:
    def __init__(self, numero, titular, saldo=0.0):
        self._numero = numero
        self._titular = titular
        self._saldo = saldo

    def deposita(self, valor):
        if valor < 0:
            raise ValueError('Você tentou depositar um valor negativo.')
        self._saldo += valor

    def saca(self, valor):
        if valor < 0:
            raise ValueError('Você tentou sacar um valor negativo.')
        if self._saldo < valor:
            raise SaldoInsuficienteError('Saldo insuficiente.')
        self._saldo -= valor

    def get_saldo(self):
        return self._saldo


# Conta Corrente
class ContaCorrente(Conta):
    def saca(self, valor):
        if valor < 0:
            raise ValueError('Você tentou sacar um valor negativo.')
        if self._saldo < valor + 0.10:
            raise SaldoInsuficienteError('Saldo insuficiente.')
        self._saldo -= (valor + 0.10)


# Conta Poupança
class ContaPoupanca(Conta):
    def deposita(self, valor):
        if valor < 0:
            raise ValueError('Você tentou depositar um valor negativo.')
        self._saldo += valor


# Testes
if __name__ == '__main__':
    # Teste com Bruna
    cc_bruna = ContaCorrente('001', 'Bruna', 1000.0)

    print("\n[ Bruna ]")
    try:
        cc_bruna.saca(-100.0)
    except ValueError:
        print('O valor a ser sacado deve ser um número positivo.')

    try:
        cc_bruna.saca(2000.0)
    except ValueError:
        print('O valor a ser sacado deve ser um número positivo.')
    except SaldoInsuficienteError:
        print('Você não possui saldo suficiente para concluir esta operação.')

    try:
        cc_bruna.deposita(-500.0)
    except ValueError:
        print('O valor a ser depositado deve ser um número positivo.')

    # Teste com Thiago
    cc_thiago = ContaCorrente('002', 'Thiago', 1500.0)

    print("\n[ Thiago ]")
    try:
        cc_thiago.saca(1400.0)
        print(f'Saldo restante de Thiago: R${cc_thiago.get_saldo():.2f}')
    except Exception as e:
        print(f'Erro: {e}')

    # Teste com Camila
    cp_camila = ContaPoupanca('003', 'Camila', 500.0)

    print("\n[ Camila ]")
    try:
        cp_camila.deposita(-100)
    except ValueError:
        print('O valor a ser depositado deve ser um número positivo.')

    try:
        cp_camila.saca(700)
    except SaldoInsuficienteError:
        print('Você não possui saldo suficiente para concluir esta operação.')